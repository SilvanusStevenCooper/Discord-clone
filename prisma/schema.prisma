// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}



model Profile{

  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String 
  email String 

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String 
  inviteCode String @unique

  members Member[]
  channels Channel[]

profileId String @db.ObjectId
profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([profileId])
}

enum memberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role memberRole @default(GUEST)

  messages Message[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("memberOne")

  conversationReceived Conversation[] @relation("memberTwo")

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade )

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  messages Message[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Conversation{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  directMessages DirectMessage[]

  memberOneId String @db.ObjectId
  memberOne Member @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo Member @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}